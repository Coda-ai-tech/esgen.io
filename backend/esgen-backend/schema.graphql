# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  companyName: String
  jobTitle: String
  phone: String
  subscriptionStatus: String
  preferredLanguage: String
  reports(where: ReportWhereInput! = {}, orderBy: [ReportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportWhereUniqueInput): [Report!]
  reportsCount(where: ReportWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  companyName: StringFilter
  jobTitle: StringFilter
  phone: StringFilter
  subscriptionStatus: StringNullableFilter
  preferredLanguage: StringNullableFilter
  reports: ReportManyRelationFilter
  payments: PaymentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input ReportManyRelationFilter {
  every: ReportWhereInput
  some: ReportWhereInput
  none: ReportWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  companyName: OrderDirection
  jobTitle: OrderDirection
  phone: OrderDirection
  subscriptionStatus: OrderDirection
  preferredLanguage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  companyName: String
  jobTitle: String
  phone: String
  subscriptionStatus: String
  preferredLanguage: String
  reports: ReportRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReportRelateToManyForUpdateInput {
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  create: [ReportCreateInput!]
  connect: [ReportWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  companyName: String
  jobTitle: String
  phone: String
  subscriptionStatus: String
  preferredLanguage: String
  reports: ReportRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReportRelateToManyForCreateInput {
  create: [ReportCreateInput!]
  connect: [ReportWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

type Report {
  id: ID!
  title: String
  status: String
  companyName: String
  industry: String
  companySize: String
  location: String
  description: String
  frameworks: JSON
  fiscalYear: String
  materialTopics: JSON
  scope1Emissions: String
  scope2Emissions: String
  scope3Emissions: String
  previewContent: String
  fullContent: String
  pdfUrl: String
  paymentRequired: Boolean
  paymentAmount: Float
  author: User
  payment: Payment
  createdAt: DateTime
  updatedAt: DateTime
  completedAt: DateTime
}

input ReportWhereUniqueInput {
  id: ID
  payment: PaymentWhereUniqueInput
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  companyName: StringFilter
  industry: StringFilter
  companySize: StringFilter
  location: StringFilter
  description: StringFilter
  fiscalYear: StringFilter
  scope1Emissions: StringFilter
  scope2Emissions: StringFilter
  scope3Emissions: StringFilter
  previewContent: StringFilter
  fullContent: StringFilter
  pdfUrl: StringFilter
  paymentRequired: BooleanFilter
  paymentAmount: FloatNullableFilter
  author: UserWhereInput
  payment: PaymentWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ReportOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  companyName: OrderDirection
  industry: OrderDirection
  companySize: OrderDirection
  location: OrderDirection
  description: OrderDirection
  fiscalYear: OrderDirection
  scope1Emissions: OrderDirection
  scope2Emissions: OrderDirection
  scope3Emissions: OrderDirection
  previewContent: OrderDirection
  fullContent: OrderDirection
  pdfUrl: OrderDirection
  paymentRequired: OrderDirection
  paymentAmount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  completedAt: OrderDirection
}

input ReportUpdateInput {
  title: String
  status: String
  companyName: String
  industry: String
  companySize: String
  location: String
  description: String
  frameworks: JSON
  fiscalYear: String
  materialTopics: JSON
  scope1Emissions: String
  scope2Emissions: String
  scope3Emissions: String
  previewContent: String
  fullContent: String
  pdfUrl: String
  paymentRequired: Boolean
  paymentAmount: Float
  author: UserRelateToOneForUpdateInput
  payment: PaymentRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  completedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input ReportUpdateArgs {
  where: ReportWhereUniqueInput!
  data: ReportUpdateInput!
}

input ReportCreateInput {
  title: String
  status: String
  companyName: String
  industry: String
  companySize: String
  location: String
  description: String
  frameworks: JSON
  fiscalYear: String
  materialTopics: JSON
  scope1Emissions: String
  scope2Emissions: String
  scope3Emissions: String
  previewContent: String
  fullContent: String
  pdfUrl: String
  paymentRequired: Boolean
  paymentAmount: Float
  author: UserRelateToOneForCreateInput
  payment: PaymentRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  completedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

type Payment {
  id: ID!
  paymentId: String
  airwallexTransactionId: String
  amount: Float
  currency: String
  status: String
  paymentMethod: String
  metadata: JSON
  user: User
  report: Report
  createdAt: DateTime
  updatedAt: DateTime
  paidAt: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
  paymentId: String
  report: ReportWhereUniqueInput
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  paymentId: StringFilter
  airwallexTransactionId: StringFilter
  amount: FloatFilter
  currency: StringFilter
  status: StringNullableFilter
  paymentMethod: StringFilter
  user: UserWhereInput
  report: ReportWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  paidAt: DateTimeNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  paymentId: OrderDirection
  airwallexTransactionId: OrderDirection
  amount: OrderDirection
  currency: OrderDirection
  status: OrderDirection
  paymentMethod: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  paidAt: OrderDirection
}

input PaymentUpdateInput {
  paymentId: String
  airwallexTransactionId: String
  amount: Float
  currency: String
  status: String
  paymentMethod: String
  metadata: JSON
  user: UserRelateToOneForUpdateInput
  report: ReportRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  paidAt: DateTime
}

input ReportRelateToOneForUpdateInput {
  create: ReportCreateInput
  connect: ReportWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  paymentId: String
  airwallexTransactionId: String
  amount: Float
  currency: String
  status: String
  paymentMethod: String
  metadata: JSON
  user: UserRelateToOneForCreateInput
  report: ReportRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  paidAt: DateTime
}

input ReportRelateToOneForCreateInput {
  create: ReportCreateInput
  connect: ReportWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createReport(data: ReportCreateInput!): Report
  createReports(data: [ReportCreateInput!]!): [Report]
  updateReport(where: ReportWhereUniqueInput!, data: ReportUpdateInput!): Report
  updateReports(data: [ReportUpdateArgs!]!): [Report]
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteReports(where: [ReportWhereUniqueInput!]!): [Report]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  report(where: ReportWhereUniqueInput!): Report
  reports(where: ReportWhereInput! = {}, orderBy: [ReportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReportWhereUniqueInput): [Report!]
  reportsCount(where: ReportWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
